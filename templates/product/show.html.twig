{% extends 'base.html.twig' %}

{% block title %}{{ product.title }}{% endblock %}

{% block stylesheets %}
	{{ parent() }}
	<link rel="stylesheet" href="{{ asset('css/product.css') }}" />
	<link rel="stylesheet" href="{{ asset('css/review.css') }}" />
{% endblock %}

{% block body %}
	<div class="container" style="margin-top: 20px;">
		<a href="{{ path('product_index') }}" class="back-link">
			<span class="material-icons-outlined">arrow_back</span>
			Back to Products
		</a>

		<div class="product-detail-container">
			<div class="row">
				<div class="col-md-6">
					{% include 'product/imageSlider.html.twig' %}
				</div>
				
				<div class="col-md-6">
					<div class="product-info">
						<h1 class="product-title">{{ product.title }}</h1>
						
						<div class="product-meta">
							<div class="product-meta-item">
								<span class="product-meta-label">Category:</span>
								<span class="product-category">{{ product.category.value }}</span>
							</div>
							
							<div class="product-meta-item">
								<span class="product-meta-label">Price:</span>
								<span class="product-price">${{ product.price }}</span>
							</div>

							<div class="product-meta-item">
								<span class="product-meta-label">Stock:</span>
								<span class="product-stock {% if product.stockQuantity < 5 %}low-stock{% endif %} {% if product.stockQuantity == 0 %}out-of-stock{% endif %}">
									{{ product.stockQuantity }}
									{% if product.stockQuantity > 0 %}
										units available
									{% else %}
										out of stock
									{% endif %}
								</span>
							</div>
						</div>

						{% if product.description %}
							<div class="product-description">
								<p>{{ product.description }}</p>
							</div>
						{% endif %}

						<div class="product-meta-item">
							{% if product.shop %}
								{% include 'shop/shopinfo.html.twig' %}
							{% endif %}
						</div>
						
						<div class="product-actions">
							<form method="post" action="{{ path('cart_add', { id: product.id }) }}" class="add-to-cart-form" id="add-to-cart-form">
								<label for="quantity">Quantity:</label>
								<input type="number" name="quantity" id="quantity" value="1" min="1" max="{{ product.stockQuantity }}" class="form-control quantity-input" />
								<button type="submit" class="btn btn-primary" id="add-to-cart-btn" {% if product.stockQuantity <= 0 %}disabled{% endif %}>
									<span class="material-icons-outlined">add_shopping_cart</span>
									<span class="btn-text">
										{% if product.stockQuantity > 0 %}Add to Cart{% else %}Out of Stock{% endif %}
									</span>
								</button>
							</form>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
	
	{# Include the review list #}
	{% include 'review/list.html.twig' with {
		reviews: reviews,
		productId: product.id
	} only %}

	{% include 'review/add.html.twig' with {
		form: form,
		product: product
	} only %}
{% endblock %}

{% block javascripts %}
	{{ parent() }}
	<script>
		const stars = document.querySelectorAll('.star-icon');
		const ratingInput = document.querySelector('.review-form input[name$="[rating]"]');

		if (stars.length && ratingInput) {
			stars.forEach(star => {
				star.addEventListener('click', () => {
					const val = star.dataset.value;
					ratingInput.value = val;
					stars.forEach(s => {
						s.textContent = (s.dataset.value <= val) ? 'star' : 'star_outline';
						s.classList.toggle('filled', s.dataset.value <= val);
					});
				});
			});
		}

		// Slider interaction
		const slider = document.getElementById('slider');
		const prevBtn = document.getElementById('prevBtn');
		const nextBtn = document.getElementById('nextBtn');

		if (slider && prevBtn && nextBtn) {
			prevBtn.addEventListener('click', () => {
				slider.scrollBy({ left: -300, behavior: 'smooth' });
			});
			nextBtn.addEventListener('click', () => {
				slider.scrollBy({ left: 300, behavior: 'smooth' });
			});
		}
		
		document.addEventListener('DOMContentLoaded', function() {
			const form = document.getElementById('add-to-cart-form');
			const button = document.getElementById('add-to-cart-btn');
			const buttonText = button.querySelector('.btn-text');
			const quantityInput = document.getElementById('quantity');
			const productId = {{ product.id }};
			
			// Function to check stock status and update button
			function updateButtonState() {
				fetch(`{{ path('cart_check_stock', {id: product.id}) }}`)
					.then(response => response.json())
					.then(data => {
						const availableQty = data.available_quantity;
						const stockStatus = data.stock_status;
						
						// Update quantity input max value
						quantityInput.max = Math.max(1, availableQty);
						
						// Update button state based on stock status
						if (stockStatus === 'out_of_stock' || stockStatus === 'max_reached') {
							button.disabled = true;
							button.classList.remove('btn-primary');
							button.classList.add('btn-secondary');
							buttonText.textContent = stockStatus === 'out_of_stock' ? 'Out of Stock' : 'Max in Cart';
						} else {
							button.disabled = false;
							button.classList.remove('btn-secondary');
							button.classList.add('btn-primary');
							buttonText.textContent = 'Add to Cart';
						}
						
						// If current quantity in input exceeds available, adjust it
						if (parseInt(quantityInput.value) > availableQty && availableQty > 0) {
							quantityInput.value = availableQty;
						} else if (availableQty <= 0) {
							quantityInput.value = 1;
						}
					})
					.catch(error => {
						console.error('Error checking stock:', error);
					});
			}
			
			// Check stock on page load
			updateButtonState();
			
			// Handle form submission
			form.addEventListener('submit', function(e) {
				e.preventDefault();
				
				if (button.disabled) {
					return;
				}
				
				const formData = new FormData(form);
				
				fetch(form.action, {
					method: 'POST',
					body: formData,
					headers: {
						'X-Requested-With': 'XMLHttpRequest'
					}
				})
				.then(response => response.json())
				.then(data => {
					if (data.success) {
						// Show success notification (assuming NotificationSystem is available from base.html.twig)
						if (typeof NotificationSystem !== 'undefined') {
							NotificationSystem.show(data.message, 'success');
						}
						
						// Update button state after successful addition
						setTimeout(updateButtonState, 100);
					} else {
						// Show error notification
						if (typeof NotificationSystem !== 'undefined') {
							NotificationSystem.show(data.message || 'An error occurred', 'error');
						}
						
						// Still check stock status in case something changed
						updateButtonState();
					}
				})
				.catch(error => {
					console.error('Error:', error);
					if (typeof NotificationSystem !== 'undefined') {
						NotificationSystem.show('Failed to add item to cart', 'error');
					}
				});
			});
			
			// Update button state when quantity changes
			quantityInput.addEventListener('change', function() {
				// Validate quantity against available stock in real-time
				setTimeout(updateButtonState, 100);
			});
		});
	</script>
{% endblock %}
