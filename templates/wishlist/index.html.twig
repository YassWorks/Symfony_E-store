{% extends 'base.html.twig' %}
{% block title %}My Wishlist{% endblock %}
{% block body %}
<div class="d-flex justify-content-center py-5">
  <div class="w-100" style="max-width: 800px;">
    {% if wishlist.items|length == 0 %}
      <div class="card shadow-sm text-center p-4">
        <div class="card-body py-5">
          <span class="material-icons-outlined" style="font-size:64px;color:var(--secondary);margin-bottom:1rem;">favorite</span>
          <h3>Your Wishlist is empty</h3>
          <p class="text-muted mb-4">Looks like you haven't added any products to your wishlist yet.</p>
          <a href="{{ path('product_index') }}" class="btn btn-primary btn-lg">
            <span class="material-icons-outlined me-2">shopping_bag</span>Start Shopping
          </a>
        </div>
      </div>
    {% else %}
      <div class="card shadow-sm mb-4">
        <div class="card-header bg-white">
          <h5 class="mb-0">Wishlist Items ({{ wishlist.items|length }})</h5>
        </div>
        <div class="table-responsive">
          <table class="table table-borderless align-middle mb-0">
            <thead class="bg-light">
              <tr>
                <th class="ps-4">Product</th>
                <th class="text-end">Unit Price</th>
                <th class="text-center">Actions</th>
              </tr>
            </thead>
            <tbody>
              {% for item in wishlist.items %}
                <tr>
                  <td class="ps-4">
                    <div class="d-flex align-items-center">
                      <div class="me-3" style="width:60px;height:60px;">
                        {% if item.images is defined and item.images|length > 0 %}
                          {% set image = item.images[0] %}
                          <img src="{{ asset('uploads/products_images/'~image.filename) }}" alt="{{ item.title }}" class="img-fluid rounded" style="width:100%;height:100%;object-fit:cover;"/>
                        {% else %}
                          <img src="{{ asset('uploads/default.jpg') }}" alt="Product" class="img-fluid rounded" style="width:100%;height:100%;object-fit:cover;"/>
                        {% endif %}
                      </div>
                      <div>
                        <h6 class="mb-0">{{ item.title }}</h6>
                        <small class="text-muted">{{ item.category.value }}</small>
                      </div>
                    </div>
                  </td>
                  <td class="text-end">${{ item.price }}</td>                  <td class="text-center">
                    <div class="d-inline-flex align-items-center gap-2">
                      <button class="btn btn-sm btn-outline-danger wishlist-remove-btn" 
                              data-product-id="{{ item.id }}"
                              data-url="{{ path('wishlist_delete',{id:item.id}) }}"
                              data-product-title="{{ item.title }}">
                        <span class="material-icons-outlined">delete</span>
                      </button>
                      <form method="post" action="{{ path('cart_add',{id:item.id}) }}" class="wishlist-add-form" data-product-id="{{ item.id }}">
                        <input type="hidden" name="quantity" value="1">
                        <button class="btn btn-sm btn-outline-primary wishlist-add-btn" type="submit"
                          {% if item.stockQuantity <= 0 %}disabled{% endif %}>
                          <span class="material-icons-outlined me-1">
                            {% if item.stockQuantity > 0 %}add_shopping_cart{% else %}remove_shopping_cart{% endif %}
                          </span>
                        </button>
                      </form>
                    </div>
                  </td>
                </tr>
              {% endfor %}
            </tbody>
          </table>
        </div>
        <div class="card-footer bg-white">
          <a href="{{ path('product_index') }}" class="btn btn-light">
            <span class="material-icons-outlined me-1">arrow_back</span>Continue Shopping
          </a>
        </div>
      </div>
    {% endif %}
  </div>
</div>
{% endblock %}

{% block javascripts %}
	<script>
		document.addEventListener('DOMContentLoaded', function() {
			const wishlistForms = document.querySelectorAll('.wishlist-add-form');
			const wishlistRemoveBtns = document.querySelectorAll('.wishlist-remove-btn');
			
			// Function to update a specific button's state
			function updateWishlistButtonState(productId, button, form) {
				fetch(`/cart/check-stock/${productId}`)
					.then(response => response.json())
					.then(data => {
						const buttonIcon = button.querySelector('.material-icons-outlined');
						const stockStatus = data.stock_status;
						
						// Update button state based on stock status
						if (stockStatus === 'out_of_stock' || stockStatus === 'max_reached') {
							button.disabled = true;
							button.classList.remove('btn-outline-primary');
							button.classList.add('btn-secondary');
							button.title = stockStatus === 'out_of_stock' ? 'Out of Stock' : 'Maximum quantity already in cart';
							buttonIcon.textContent = 'remove_shopping_cart';
						} else {
							button.disabled = false;
							button.classList.remove('btn-secondary');
							button.classList.add('btn-outline-primary');
							button.title = 'Add to Cart';
							buttonIcon.textContent = 'add_shopping_cart';
						}
					})
					.catch(error => {
						console.error('Error checking stock for product', productId, ':', error);
					});
			}
			
			// Initialize all wishlist buttons
			wishlistForms.forEach(function(form) {
				const productId = form.getAttribute('data-product-id');
				const button = form.querySelector('.wishlist-add-btn');
				
				// Check stock on page load
				updateWishlistButtonState(productId, button, form);
				
				// Handle form submission
				form.addEventListener('submit', function(e) {
					e.preventDefault();
					
					if (button.disabled) {
						return;
					}
					
					const formData = new FormData(form);
					
					fetch(form.action, {
						method: 'POST',
						body: formData,
						headers: {
							'X-Requested-With': 'XMLHttpRequest'
						}
					})
					.then(response => response.json())
					.then(data => {
						if (data.success) {
							// Show success notification
							if (typeof NotificationSystem !== 'undefined') {
								NotificationSystem.show(data.message, 'success');
							}
							
							// Update button state after successful addition
							setTimeout(() => updateWishlistButtonState(productId, button, form), 100);
						} else {
							// Show error notification
							if (typeof NotificationSystem !== 'undefined') {
								NotificationSystem.show(data.message || 'An error occurred', 'error');
							}
							
							// Still check stock status in case something changed
							updateWishlistButtonState(productId, button, form);
						}
					})
					.catch(error => {
						console.error('Error:', error);
						if (typeof NotificationSystem !== 'undefined') {
							NotificationSystem.show('Failed to add item to cart', 'error');
						}
					});
				});
			});

			// Handle wishlist remove button clicks
			wishlistRemoveBtns.forEach(function(btn) {
				btn.addEventListener('click', function(e) {
					e.preventDefault();
					
					const productId = btn.getAttribute('data-product-id');
					const url = btn.getAttribute('data-url');
					const productTitle = btn.getAttribute('data-product-title');
					const row = btn.closest('tr');
					
					// Disable button temporarily
					btn.disabled = true;
					
					fetch(url, {
						method: 'POST',
						headers: {
							'X-Requested-With': 'XMLHttpRequest'
						}
					})
					.then(response => response.json())
					.then(data => {
						if (data.success) {
							// Show success notification
							if (typeof NotificationSystem !== 'undefined') {
								NotificationSystem.show(data.message, 'success');
							}
							
							// Remove the row from the table with a smooth animation
							row.style.transition = 'opacity 0.3s ease';
							row.style.opacity = '0';
							setTimeout(() => {
								row.remove();
								
								// Check if the wishlist is now empty
								const remainingRows = document.querySelectorAll('tbody tr');
								if (remainingRows.length === 0) {
									// Reload the page to show the empty wishlist message
									window.location.reload();
								} else {
									// Update the item count in the header
									const header = document.querySelector('.card-header h5');
									if (header) {
										const currentCount = remainingRows.length;
										header.textContent = `Wishlist Items (${currentCount})`;
									}
								}
							}, 300);
						} else {
							// Show error notification
							if (typeof NotificationSystem !== 'undefined') {
								NotificationSystem.show(data.message || 'An error occurred', 'error');
							}
							// Re-enable button on error
							btn.disabled = false;
						}
					})
					.catch(error => {
						console.error('Error:', error);
						if (typeof NotificationSystem !== 'undefined') {
							NotificationSystem.show('Failed to remove item from wishlist', 'error');
						}
						// Re-enable button on error
						btn.disabled = false;
					});
				});
			});
		});
	</script>
{% endblock %}